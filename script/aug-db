#!/usr/bin/env python

import argparse
import sqlite3
import os

class MissingOption(Exception):
	pass

DEFAULT_DB_PATH = '~/.aug-db.sqlite'
SCHEMA_VERSION = 2

def opt_parser():
	parser = argparse.ArgumentParser(description='modify/view aug-db database')
	parser.add_argument(
		'--db', default=DEFAULT_DB_PATH, 
		help='sqlite db file. default: %s' % (DEFAULT_DB_PATH)
	)
	parser.add_argument(
		'-f', '--file', 
		type=argparse.FileType('r'), 
		help='input file'
	)
	parser.add_argument('-i', '--input', help='input text')
	parser.add_argument('-t', '--tags', nargs='+', help='mark input with tag(s)')
	parser.add_argument(
		'-r', '--raw', action='store_true',
		help='set input type to "raw" instead of "utf-8"'
	)
	parser.add_argument(
		'-v', '--verbose', action='store_true', 
		help='print debug output.'
	)

	return parser

def run(options):
	def log(s):
		if options.verbose:
			print s  

	log(repr(options))
	input = None
	if options.file:
		input = options.file.read()
	else:
		input = options.input
	
	if not input:
		raise MissingOption("an input file or input option must be provided")

	if options.tags is None or len(options.tags) < 1:
		raise MissingOption("please provide at least one tag")

	dbpath = os.path.expanduser(options.db)
	log("dbpath: %s" % dbpath)
	cx = sqlite3.connect(dbpath)
	c = cx.cursor()
	
	c.execute("SELECT version FROM admin")
	version = c.fetchone()
	if not version:
		raise Exception("invalid or corrupt db: no version found")
	version = version[0]
	log("db schema version: %r" % (version))
	if SCHEMA_VERSION != version:
		raise Exception("schema version mismatch. please update aug-db schema")
	
	status = "added new blob to db"

	input = input.strip().decode('utf-8')
	c.execute('SELECT id FROM blobs WHERE value = (?)', (input,))
	blob_id = c.fetchone()
	if not blob_id:
		log("insert input: %r" % input)
		c.execute(
			'INSERT INTO blobs (value, raw) VALUES (?, ?)', 
			(input, 1 if options.raw else 0)
		)

		blob_id = c.lastrowid

		if not blob_id:
			raise Exception("failed to recover row id of inserted input")
	else:
		blob_id = blob_id[0]
		print "value already existed in db, update time and tags"
		status = "updated tags for blob"
		c.execute('UPDATE blobs SET updated_at = strftime("%s", "now") WHERE id = ?', (blob_id,))
		c.execute('DELETE FROM fk_blobs_tags WHERE blob_id = ?', (blob_id,))
	
	for tag in options.tags:
		tag = tag.strip()
		c.execute('SELECT id FROM tags WHERE name = ?', (tag,))
		tid = c.fetchone()
		if not tid:
			c.execute('INSERT INTO tags (name) VALUES (?)', (tag,) )
			tid = c.lastrowid
			if not tid:
				raise Exception("failed to recover row id of inserted tag")
		else:
			tid = tid[0]

		c.execute(
			'INSERT INTO fk_blobs_tags (blob_id, tag_id) VALUES (?, ?)',
			(blob_id, tid)
		)
	
	cx.commit()

	print status
	
if __name__ == "__main__":
	opt_p = opt_parser()
	options = opt_p.parse_args()

	try:
		run(options)
	except MissingOption as e:
		print e
		print
		opt_p.print_help()
		exit(-1)
	#except Exception as e:
	#	print "unexpected error:"
	#	print e
	#	exit(-1)

